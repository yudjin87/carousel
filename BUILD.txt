##############################################################################
 CMakeLists.txt is the main CMake file, that generates building system according 
 to the specified generator and building type (debug/release, shared/static, etc).
 
 Here is at glance how file system structure is organized:
##############################################################################
   +/carousel                     <= CAROUSEL_WD
       +/demos
       +/docs
       +/include                  <= HPP_SOURCE_TREE
       +/product                  <= Binaries output (for different configurations and platforms)
           +/mingw-x64-debug      <= BIN_OUTPUT_PATH
              +/bin               <= Binaries
              +/intermediate      <= Intermediate files
              +/unittest          <= Unittest applications
           +/mingw-x64-release
           +/msvc11-x32-debug-static
           +/msvc11-x64-release-static
           +/...
       +/msvc                     <= Source tree for the MSVC
       +/qtcreator                <= IDE_SOURCE_TREE
           +/carousel.pro
           +/carousel_with_tests.pro
       +/src                      <= CPP_SOURCE_TREE
           +/booting              <= PROJECT_SOURCES
           +/...
       +/tests                    <= CPP_TESTS_TREE
           +/booting_test         <= TEST_PROJECT_SOURCES
           +/...
##############################################################################
 
 To generate out-of-source IDE (MSVS, Xcode, etc.) project run from the 'build' folder

   cmake .. 

 with static configurations by default or

   cmake .. -DCMAKE_BUILD_TYPE=debug

 with shared configurations. Regardless of keyword 'debug' it will generate
 all existing shared configurations (now there are two of them: debug and release).

 You also can generate solution without tests just adding the -DCRSL_TEST=OFF
 parameter (which is ON by default):

   cmake .. [params] -DCRSL_TEST=OFF

 On MacOS you should specify generator for Xcode explicitly, e.g. run

   cmake .. [params] -G "Xcode"

 because cmake will generate Unix makefiles by default on MacOS.
 More generators:

   cmake .. [params] -G "Visual Studio 11"
   cmake .. [params] -G "Visual Studio 11 Win64"

  
##############################################################################  
 To build all binaries run (from VS Command Prompt on Windows) 

   cmake -P build_all.txt

 or to build using MinGW run

   cmake -DMINGW=TRUE -P build_all.txt

 directly from the root. It produces specified build system
 (for nmake on Windows and for make on UNIX) and perform the
 build. To completely use the cmake's power it is recomended to
 create building systems in different folders to do not mix 
 cmake's working stuff.

 If you have both Qt binaries - for MinGW and for MSVC,
 you should specify path to the MinGW Qt:
   cmake -DMINGW=TRUE -P build_all.txt
   QTDIR=/d/Qt/5.0.1-mingw-x64
 
##############################################################################
 For more information use Ctrl+F at the page
 http://www.cmake.org/cmake/help/v2.8.10/cmake.html
##############################################################################
